[build-system]
requires = ["setuptools>=64", "wheel", "setuptools-scm>=8"]
build-backend = "setuptools.build_meta"

[project]
name = "pmll"
description = "Persistent Memory Logic Loop - Memory optimization for Large Language Models"
readme = "README.md"
license = {file = "LICENSE"}
keywords = ["llm", "memory", "optimization", "transformer", "ai"]
authors = [
    {name = "PMLL Team", email = "team@pmll.ai"}
]
maintainers = [
    {name = "PMLL Team", email = "team@pmll.ai"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: System :: Hardware :: Universal Serial Bus (USB) :: Memories",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
    "torch>=2.0.0",
    "numpy>=1.24.0",
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.23.0",
    "pydantic>=2.0.0",
    "redis>=4.5.0",
    "psycopg2-binary>=2.9.0",
    "sqlalchemy[asyncio]>=2.0.0",
    "aioredis>=2.0.0",
    "prometheus-client>=0.17.0",
    "psutil>=5.9.0",
    "asyncpg>=0.28.0",
    "websockets>=11.0.0",
    "plotly>=5.15.0",
    "jinja2>=3.1.0",
    "python-multipart>=0.0.6",
    "click>=8.1.0",
    "toml>=0.10.0",
]
dynamic = ["version"]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=4.0.0",
    "pytest-mock>=3.11.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
]

# Machine Learning integrations
ml = [
    "transformers>=4.30.0",
    "huggingface-hub>=0.16.0",
    "tokenizers>=0.13.0",
    "datasets>=2.14.0",
    "accelerate>=0.21.0",
]

# Monitoring and observability
monitoring = [
    "grafana-client>=3.5.0",
    "prometheus-api-client>=0.5.0",
    "jaeger-client>=4.8.0",
    "opentelemetry-api>=1.19.0",
    "opentelemetry-sdk>=1.19.0",
    "opentelemetry-instrumentation-fastapi>=0.40b0",
]

# High-performance computing
hpc = [
    "cupy-cuda12x>=12.0.0",
    "numba>=0.57.0",
    "mpi4py>=3.1.0",
    "dask[distributed]>=2023.7.0",
]

# Full installation with all extras
all = [
    "pmll[dev,ml,monitoring,hpc]"
]

[project.urls]
Homepage = "https://github.com/pmll/pmll"
Documentation = "https://pmll.readthedocs.io/"
Repository = "https://github.com/pmll/pmll.git"
Issues = "https://github.com/pmll/pmll/issues"
Changelog = "https://github.com/pmll/pmll/blob/main/CHANGELOG.md"

[project.scripts]
pmll-server = "pmll.cli:start_server"
pmll-benchmark = "pmll.cli:run_benchmark"
pmll-migrate = "pmll.cli:migrate_database"
pmll-health = "pmll.cli:health_check"

[tool.setuptools]
packages = ["pmll"]
package-dir = {"" = "src"}
include-package-data = true

[tool.setuptools.package-data]
pmll = ["py.typed", "*.pyi", "templates/*", "static/*", "migrations/*"]

[tool.setuptools_scm]
write_to = "src/pmll/_version.py"
version_scheme = "post-release"
local_scheme = "dirty-tag"

# Code quality tools configuration
[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.tox
  | venv
  | _build
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "transformers.*",
    "redis.*",
    "psycopg2.*",
    "prometheus_client.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=pmll",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "performance: marks tests as performance benchmarks",
    "stress: marks tests as stress tests",
    "gpu: marks tests that require GPU",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]